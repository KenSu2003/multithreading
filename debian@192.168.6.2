#include <stdio.h>
#include <unistd.h>
#include <time.h>
#include <stdlib.h>
#include <pthread.h>

#define SIZE 10
char buffer[SIZE];

int count = 0;
int putIndex =0;
int getIndex = 0;

pthread_mutex_t lock;

void* inputThread(void* input) {
    char c = 65;
    while (count <= 122){

        pthread_mutex_lock(&lock);
        while (count == SIZE){
            pthread_mutex_unlock(&lock);
            pthread_mutex_lock(&lock);
        }
        count++;
        buffer[putIndex] = c;
        putIndex++ ;
        printf("filling buffer: %c\n", c);
        
        if(putIndex == SIZE){
            putIndex = 0;
        }
        
        c += 1;
        pthread_mutex_unlock(&lock);
    }
}

void* outputThread(void* input){
    char c=0; 
    while(c <= 122){
        pthread_mutex_lock(&lock);
        while(count == 0){
            pthread_mutex_unlock(&lock);
            pthread_mutex_lock(&lock);
        }

        count--;
        c = buffer[getIndex];
        getIndex++;
        printf("Emptying buffer: %c, %d\n", c, c);

        if (getIndex == SIZE){
            getIndex = 0;
        }
        pthread_mutex_unlock(&lock);

        if(c == 122){
            break;
        }
    }
}

// void* threadFuncOne(void *var){
//     int* input=(int* ) var;
//     pthread_t thread_id = pthread_self();
//     sleep(1);
//     printf("Received %d inside thread argument.\n", *input);
//     return NULL;
// }

// void* threadFuncTwo(void *var){
//     int* input=(int* ) var;
//     pthread_t thread_id = pthread_self();
//     sleep(1);
//     for(int i=0; i<10; i++){
//         printf("Printing %d inside thread with ID: %u\n", i, thread_id);
//     }
//     return NULL;
// }

int main(){

    
    
    /* Thread */
    int data = 6;
    // pthread_t thread_id, thread_id2;
    pthread_t thread_id[2];
    printf("Initializing Data\n");
    printf("B4 Thread\n");

    //initialize lock
    if (pthread_mutex_init(&lock, NULL) != 0){
        printf("\n mutex init has failed\n");
        return 1;
    }

    // Function
    pthread_create(&(thread_id[0]), NULL, outputThread, (void*)(&data));
    pthread_create(&(thread_id[1]), NULL, inputThread, (void*)(&data));

    // blocks the main function (thread) until the thread function is finished its execution
    pthread_join(thread_id[0], NULL);
    pthread_join(thread_id[1], NULL);    

    printf("After Thread \n");

    // Uninitialize lock
    pthread_mutex_destroy(&lock);

   
    pthread_exit(0);
    

    // /* Configure and Capture */
    // int gpio_number = 67;
    // configure_interrupt(gpio_number);   // enable interrupt
    // char InterruptPath[40];
    // sprintf(InterruptPath, "/sys/class/gpio/gpio%d/value", gpio_number);
    // int epfd;
    // struct epoll_event events, ev;
    // // (Step 1) open the interrupt file
    // FILE* fp = fopen(InterruptPath, "r");
    // int fd = fileno(fp);
    // // (Step 2) create epoll instance to monitor I/O events on interrupt file
    // epfd = epoll_create(1);
    // // (Step 3) register events that will be monitored
    // ev.events = EPOLLIN | EPOLLET;
    // // (Step 4) register interrupt file with epoll interface for monitoring
    // ev.data.fd = fd;
    // epoll_ctl(epfd, EPOLL_CTL_ADD,fd,&ev);   
}

//configures the gpio pin as input
void configure_gpio_input(int gpio_number){

    //converting gpio number from integer to string
    char gpio_num[10];
    sprintf(gpio_num, "export%d", gpio_number);
    const char* GPIOExport="/sys/class/gpio/export";

    // exporting the GPIO to user space
    FILE* fp = fopen(GPIOExport, "w");
    fwrite(gpio_num, sizeof(char), sizeof(gpio_num), fp);
    fclose(fp);

    // setting gpio direction as input
    char GPIODirection[40];
    sprintf(GPIODirection, "/sys/class/gpio/gpio%d/direction", gpio_number);

    // setting GPIO as input
    fp = fopen(GPIODirection, "w");
    fwrite("in", sizeof(char), 2, fp);
    fclose(fp);
}

// sets up an interrupt on the given GPIO pin
void configure_interrupt(int gpio_number){
    configure_gpio_input(gpio_number);          /// set gpio as input

    // configuring interrupts on rising, falling or both edges
    char InterruptEdge[40];
    sprintf(InterruptEdge, "/sys/class/gpio/gpio%d/edge", gpio_number);

    // configures interrupt on falling edge
    FILE* fp = fopen(InterruptEdge, "w");
    fwrite("falling", sizeof(char), 7, fp);

    // configures interrupt on both edges
    // fwrite("both", sizeof(char), 4, fp);

    fclose(fp);
}